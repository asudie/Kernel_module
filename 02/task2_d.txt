--- future_jiffies_patch.c	2024-04-05 18:50:11.811696175 +0300
+++ future_data_patch.c	2024-04-05 19:12:51.559274879 +0300
@@ -2,7 +2,6 @@
 /*
  * Copyright 2024 Aleksandra Smolniakova.
  */
-
 #include <linux/debugfs.h>
 #include <linux/kernel.h>
 #include <linux/fs.h>
@@ -12,46 +11,112 @@
 #include <linux/uaccess.h>
 #include <linux/jiffies.h>
 #include <linux/timer.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/stat.h>
+#include <linux/uaccess.h>
 
 #define BUFFER_SIZE 11
 
 // Module metadata
 MODULE_AUTHOR("Aleksandra Smolniakova");
-MODULE_DESCRIPTION("Hello KernelCare driver jiffies patch");
+MODULE_DESCRIPTION("Hello KernelCare driver data patch");
 MODULE_LICENSE("GPL");
 
+
 // This directory entry will point to `/sys/kernel/debug/kernelcare`.
 static struct dentry *dir;
 
-static long jiffies_read_op(struct file *fp, char *buff, size_t count, loff_t *off)
+
+static struct mutex foo_mutex;
+static char foo_tmp[PAGE_SIZE];
+static int foo_size;
+
+static long jiffies_read_op(struct file *fp, char *buff, size_t count,
+								loff_t *off)
 {
 	long j = jiffies;
 	char my_str[BUFFER_SIZE + 1]; // +1 for null terminator
 	int len;
 
 	len = snprintf(my_str, BUFFER_SIZE + 1, "%ld", j);
-	// printk("JIFFIE READS!");
 	return simple_read_from_buffer(buff, count, off, my_str, 11);
 }
 
+static ssize_t data_read_op(struct file *fp, char *buff, size_t count,
+								loff_t *off)
+{
+	int ret;
+
+	mutex_lock(&foo_mutex);
+	if (count > foo_size - *off)
+		count = foo_size - *off;
+
+	if (!count) {
+		ret = 0;
+		goto cleanup;
+	}
+
+	if (copy_to_user(buff, foo_tmp + *off, count)) {
+		ret = -EFAULT;
+		goto cleanup;
+	}
+	// printk("DATA READ!\n");
+	*off += count;
+	ret = count;
+cleanup:
+		mutex_unlock(&foo_mutex);
+		return ret;
+}
+
+static ssize_t data_write_op(struct file *fp, const char *buff, size_t count,
+								loff_t *off)
+{
+	int ret;
+
+	mutex_lock(&foo_mutex);
+	count = min(count, PAGE_SIZE);
+
+	if (copy_from_user(foo_tmp, buff, count)) {
+		ret = -EFAULT;
+		goto cleanup;
+	}
+	// printk("DATA WRITEN!\n");
+	// printk(buff);
+	foo_size = count;
+	ret = count;
+cleanup:
+		mutex_unlock(&foo_mutex);
+		return ret;
+}
+
 const struct file_operations fops_j = {
 	.read = jiffies_read_op,
 	.write = NULL,
 	.open = NULL
 };
 
+const struct file_operations fops_d = {
+	.read = data_read_op,
+	.write = data_write_op
+};
+
 // Custom init and exit methods
 static int __init custom_init(void)
 {
 	struct dentry *file1;
+	struct dentry *file2;
+
+	foo_size = 0;
 
+	mutex_init(&foo_mutex);
 	dir = 0;
 	dir = debugfs_create_dir("kernelcare", 0);
 	if (!dir) {
 		// Abort module load.
 		pr_alert("debugfs_kernelcare: failed to create /sys/kernel/debug/kernelcare\n");
-		return -1;
-	}
+	return -1;
+}
 
 	file1 = debugfs_create_file("jiffies", 0004, dir, NULL, &fops_j);
 
@@ -60,8 +125,14 @@
 		pr_alert("debugfs_kernelcare: failed to create /sys/kernel/debug/kernelcare/jiffies\n");
 		return -1;
 	}
+	file2 = debugfs_create_file("data", 0204, dir, NULL, &fops_d);
+	if (!file2) {
+		// Abort module load.
+		pr_alert("debugfs_kernelcare: failed to create /sys/kernel/debug/kernelcare/data\n");
+		return -1;
+	}
 
-	 pr_debug("Hello KernelCare!");
+	pr_debug("Hello KernelCare!");
 	return 0;
 }
 
